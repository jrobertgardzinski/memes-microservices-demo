package pl.jrobertgardzinski.images.controllers;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.imageio.ImageIO;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import com.google.common.collect.Lists;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

import pl.jrobertgardzinski.images.model.Image;
import pl.jrobertgardzinski.images.repository.ImageRepository;

@RestController
public class ImageController {
	
	@Autowired
	ImageRepository imageRepository;
	
	@Autowired
	RestTemplate restTemplate;
	
	private void randomlyRunLong() {
		Random rand = new Random();
		int randomNum = rand.nextInt((3 - 1) + 1) + 1;
		if (randomNum == 3)
			sleep();
	}

	private void sleep() {
		try {
			Thread.sleep(11000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	@PostMapping()
	public String addImage(@RequestParam("title") String title, 
	  @RequestParam("image") MultipartFile image) 
	  throws IOException {
		Image newImage = new Image(title);
		
		newImage.setImage(image.getBytes());
		System.out.println("BYTESY!");
		Arrays.asList(image.getBytes()).forEach(bite -> System.out.print(bite + " "));
		Image addedImage = imageRepository.save(newImage);
	    return "Added new image with ID: " + addedImage.getId();
	}

	@HystrixCommand(fallbackMethod = "buildFallbackImage")
	@GetMapping("/{id}")
	public ResponseEntity<byte[]> getImage(@PathVariable Integer id) throws IOException {
	    randomlyRunLong();
	    Image image = imageRepository.findById(id).get();
	    
	    HttpHeaders headers = new HttpHeaders();
	    headers.setContentType(MediaType.IMAGE_JPEG);
	    headers.setContentLength(image.getImage().length);
	    	    
	    return ResponseEntity.ok().headers(headers).body(image.getImage());
	}
	private ResponseEntity<byte[]> buildFallbackImage(Integer id) throws IOException {
		byte[] errorImage = {
				0x55, 0x57, 0x73, 0x79, 0x56, 0x30, 0x46, 0x6e, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x52, 0x5a, 0x51, 0x55, 0x46, 0x42, 0x51, 0x57, 0x39, 0x42, 0x51, 0x55, 0x46, 0x42, 0x52, 0x31, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x5a, 0x30, 0x46, 0x42, 0x51, 0x55, 0x46, 0x43, 0x51, 0x55, 0x4a, 0x6e, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x52, 0x30, 0x46, 0x44, 0x0d, 0x0a, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x0d, 0x0a, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6d, 0x31, 0x61, 0x62, 0x56, 0x70, 0x74, 0x57, 0x6d, 0x31, 0x61, 0x62, 0x56, 0x70, 0x74, 0x57, 0x6d, 0x31, 0x61, 0x62, 0x56, 0x70, 0x74, 0x57, 0x6d, 0x31, 0x61, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x0d, 0x0a, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x30, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x30, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x0d, 0x0a, 0x51, 0x55, 0x52, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x4e, 0x57, 0x31, 0x61, 0x62, 0x56, 0x70, 0x74, 0x57, 0x6d, 0x31, 0x61, 0x62, 0x56, 0x70, 0x74, 0x57, 0x6d, 0x31, 0x61, 0x62, 0x56, 0x70, 0x74, 0x57, 0x6d, 0x31, 0x6a, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x0d, 0x0a, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6c, 0x41, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x64, 0x30, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x51, 0x4f, 0x45, 0x46, 0x42, 0x55, 0x44, 0x68, 0x42, 0x0d, 0x0a, 0x51, 0x56, 0x41, 0x34, 0x51, 0x55, 0x46, 0x42, 0x51, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x42, 0x4c, 0x79, 0x38, 0x34, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x55, 0x45, 0x76, 0x4c, 0x7a, 0x68, 0x36, 0x54, 0x58, 0x70, 0x50, 0x57, 0x6d, 0x31, 0x61, 0x61, 0x30, 0x45, 0x76, 0x64, 0x30, 0x4e, 0x61, 0x62, 0x56, 0x70, 0x72, 0x51, 0x53, 0x39, 0x33, 0x51, 0x31, 0x70, 0x74, 0x57, 0x6d, 0x35, 0x4e, 0x0d, 0x0a, 0x65, 0x6b, 0x31, 0x36, 0x4c, 0x79, 0x39, 0x33, 0x52, 0x43, 0x38, 0x76, 0x64, 0x30, 0x52, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x69, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x51, 0x55, 0x46, 0x45, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x39, 0x42, 0x51, 0x55, 0x51, 0x76, 0x4c, 0x79, 0x38, 0x34, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x51, 0x76, 0x0d, 0x0a, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x46, 0x51, 0x4c, 0x79, 0x39, 0x42, 0x55, 0x43, 0x38, 0x76, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x58, 0x70, 0x74, 0x57, 0x6d, 0x31, 0x61, 0x51, 0x56, 0x41, 0x34, 0x51, 0x55, 0x46, 0x51, 0x4f, 0x45, 0x46, 0x74, 0x57, 0x6d, 0x31, 0x61, 0x0d, 0x0a, 0x62, 0x56, 0x70, 0x74, 0x57, 0x6e, 0x70, 0x4e, 0x65, 0x6b, 0x30, 0x76, 0x4c, 0x7a, 0x68, 0x42, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x53, 0x38, 0x76, 0x4f, 0x45, 0x46, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x39, 0x33, 0x51, 0x55, 0x45, 0x76, 0x64, 0x30, 0x46, 0x42, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x39, 0x42, 0x51, 0x55, 0x46, 0x42, 0x0d, 0x0a, 0x51, 0x55, 0x46, 0x42, 0x51, 0x53, 0x39, 0x33, 0x51, 0x55, 0x45, 0x76, 0x64, 0x30, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x45, 0x54, 0x58, 0x70, 0x4e, 0x64, 0x30, 0x51, 0x76, 0x4c, 0x33, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x33, 0x52, 0x43, 0x38, 0x76, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x54, 0x56, 0x74, 0x57, 0x6d, 0x31, 0x52, 0x52, 0x43, 0x39, 0x42, 0x53, 0x6d, 0x31, 0x61, 0x0d, 0x0a, 0x62, 0x56, 0x46, 0x45, 0x4c, 0x30, 0x46, 0x4b, 0x62, 0x56, 0x70, 0x74, 0x59, 0x33, 0x70, 0x4e, 0x65, 0x6c, 0x41, 0x76, 0x4c, 0x30, 0x46, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x55, 0x43, 0x38, 0x76, 0x51, 0x55, 0x31, 0x36, 0x54, 0x58, 0x70, 0x51, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x7a, 0x68, 0x42, 0x51, 0x56, 0x41, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4f, 0x45, 0x46, 0x42, 0x55, 0x43, 0x38, 0x76, 0x0d, 0x0a, 0x4c, 0x33, 0x64, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x55, 0x44, 0x68, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x51, 0x53, 0x38, 0x76, 0x4f, 0x48, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x42, 0x4c, 0x79, 0x38, 0x34, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x31, 0x70, 0x74, 0x57, 0x6d, 0x74, 0x42, 0x0d, 0x0a, 0x4c, 0x33, 0x64, 0x44, 0x57, 0x6d, 0x31, 0x61, 0x61, 0x30, 0x45, 0x76, 0x64, 0x30, 0x4e, 0x61, 0x62, 0x56, 0x70, 0x75, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x69, 0x38, 0x76, 0x64, 0x30, 0x52, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x4c, 0x79, 0x39, 0x33, 0x52, 0x45, 0x31, 0x36, 0x54, 0x58, 0x6f, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x30, 0x46, 0x42, 0x52, 0x43, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x0d, 0x0a, 0x51, 0x55, 0x46, 0x45, 0x4c, 0x79, 0x38, 0x76, 0x4f, 0x45, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x45, 0x4c, 0x30, 0x46, 0x42, 0x52, 0x43, 0x39, 0x42, 0x51, 0x55, 0x51, 0x76, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x31, 0x36, 0x54, 0x58, 0x70, 0x42, 0x55, 0x43, 0x38, 0x76, 0x51, 0x56, 0x41, 0x76, 0x4c, 0x30, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x0d, 0x0a, 0x62, 0x56, 0x70, 0x74, 0x57, 0x6b, 0x46, 0x51, 0x4f, 0x45, 0x46, 0x42, 0x55, 0x44, 0x68, 0x42, 0x62, 0x56, 0x70, 0x74, 0x57, 0x6d, 0x31, 0x61, 0x62, 0x56, 0x70, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x53, 0x38, 0x76, 0x4f, 0x45, 0x45, 0x76, 0x4c, 0x7a, 0x68, 0x42, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x53, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x64, 0x30, 0x46, 0x42, 0x0d, 0x0a, 0x4c, 0x33, 0x64, 0x42, 0x51, 0x53, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x52, 0x45, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x0d, 0x0a, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x30, 0x31, 0x62, 0x56, 0x70, 0x74, 0x57, 0x6d, 0x31, 0x61, 0x62, 0x56, 0x70, 0x74, 0x57, 0x6d, 0x31, 0x61, 0x62, 0x56, 0x70, 0x74, 0x57, 0x6d, 0x31, 0x61, 0x62, 0x57, 0x4e, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x54, 0x58, 0x70, 0x4e, 0x65, 0x6b, 0x31, 0x36, 0x55, 0x43, 0x38, 0x76, 0x0d, 0x0a, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x38, 0x76, 0x4c, 0x79, 0x39, 0x33, 0x51, 0x54, 0x30, 0x3d	
		};
		
	    Image image = new Image().withTags(new ArrayList<String>()).withTitle("Image not loaded properly!")
    		.withImage("\\x424d96020000000000003600000028000000190000000800000001001800000000006002000000000000000000000000000000000000000000000000000000000000000000333333333333333333333333333333999999999999999999999999999999ccccccccccccccccccccccccccccccffffffffffffffffffffffffffffff00000000000000000000000000000000333333333333333333333333333333999999999999999999999999999999ccccccccccccccccccccccccccccccffffffffffffffffffffffffffffff000000000000ff0000ff0000ff00000033333300ffff33333300ffff33333399999900ff0099999900ff00999999ccccccffff00ffff00ccccccccccccffffffff0000ffffffff0000ffffff000000000000ff00000000000000000033333300ffff00ffff33333333333399999900ff0000ff00999999999999ccccccffff00ccccccffff00ccccccffffffff0000ff0000ffffffffffff000000000000ff0000ff00000000000033333300ffff33333300ffff33333399999900ff0099999900ff00999999ccccccffff00ccccccffff00ccccccffffffff0000ffffffff0000ffffff000000000000ff00000000000000000033333300ffff33333300ffff33333399999900ff0099999900ff00999999ccccccffff00ccccccffff00ccccccffffffff0000ffffffff0000ffffff000000000000ff0000ff0000ff00000033333300ffff00ffff33333333333399999900ff0000ff00999999999999ccccccccccccffff00ffff00ccccccffffffff0000ff0000ffffffffffff00000000000000000000000000000000333333333333333333333333333333999999999999999999999999999999ccccccccccccccccccccccccccccccffffffffffffffffffffffffffffff00".getBytes());
	    
	    HttpHeaders headers = new HttpHeaders();
	    headers.setContentType(MediaType.IMAGE_JPEG);
	    headers.setContentLength(image.getImage().length);
	    	    
	    return ResponseEntity.ok().headers(headers).body(image.getImage());
	}
	
	@GetMapping()
	public ResponseEntity<Page<Image>> getAllImages(Pageable pageable) throws IOException {
	    
	    Page<Image> images =  imageRepository.findAll(pageable);

	    HttpHeaders headers = new HttpHeaders();
	    headers.setContentType(MediaType.APPLICATION_JSON);
	    HttpEntity<String> entity = new HttpEntity<String>('[' + images.stream().map(image -> image.getId().toString()).collect(Collectors.joining(",")) + ']' ,headers);	    
    	ResponseEntity<Map> restExchange = 
	    		restTemplate.exchange(
	    				"http://service-tags/images",
	    				HttpMethod.POST,
	    				entity,
	    				Map.class);
    	
    	Map<String, List<String>> restResult = restExchange.getBody();
    	images.forEach(image -> image.setTags(restResult.get(image.getId().toString())));
	    	    
	    return ResponseEntity.ok().body(images);
	}
	
	@DeleteMapping("{id}")
	public void deleteImage(@PathVariable Integer id) {		
		this.imageRepository.deleteById(id);		

		restTemplate.delete("http://service-tags/image/" + id.toString());
	}
	
	@PatchMapping("{id}")
	public void patchImage(@PathVariable Integer id, @RequestBody String title) {
		this.imageRepository.findById(id).ifPresent(image -> {
			image.setTitle(title);
			this.imageRepository.save(image);
		});		
	}
	
}
